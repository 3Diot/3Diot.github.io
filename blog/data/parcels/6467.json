{"success": true, "parcel": {"id": 6467, "height": 9, "token": null, "name": "Anoncats Clubhouse", "traffic_visits": null, "address": "19 Ahiu Street", "visible": true, "geometry": {"type": "Polygon", "crs": {"type": "name", "properties": {"name": "EPSG:3857"}}, "coordinates": [[[14.43, -12.23], [14.43, -12.09], [14.519899995, -12.09], [14.519899995, -12.23], [14.43, -12.23]]]}, "area": 125.85999307139397, "streets": [{"name": "Ahiu Street", "geometry": {"type": "LineString", "coordinates": [[14.41, -12.42], [14.41, -11.6]]}, "visible": true, "kind": null, "island": "Kauai", "id": 2939}, {"name": "Kawau Drive", "geometry": {"type": "LineString", "coordinates": [[14.41, -12.25], [14.65, -12.25]]}, "visible": true, "kind": null, "island": "Kauai", "id": 2966}, {"name": "Akaku Drive", "geometry": {"type": "LineString", "coordinates": [[14.21, -12.18], [14.41, -12.18]]}, "visible": true, "kind": null, "island": "Kauai", "id": 2969}], "distance": 1882.5328682389586, "x1": 1443, "x2": 1452, "y1": 0, "y2": 9, "z1": -1223, "z2": -1209, "suburb": "Kauai", "is_common": false, "owner": "0x1ce139b73dbc1d855e4b360856ac3885558fc5f8", "owner_name": "jseam.eth", "contributors": ["0xb60d86D5DC2fF95766EA16E370EDC8845FaA105F"], "label": null, "description": "This is the Clubhouse for Anoncats! Expect Anoncats", "sandbox": false, "lightmap_status": "None", "grid": true, "price": null, "content": {"features": [{"type": "richtext", "scale": [2, 2, 0], "text": "Anoncats Clubhouse\n\nPlay Guessing Game with your friends\n\nLaunch: TBD", "position": [-3.75, 0.2, 0], "rotation": [0, 1.5707963267948966, 0], "version": "15062", "uuid": "28f245cc-74e7-4a09-b8c7-fd50fdae5eb1", "inverted": true, "blendMode": "Combine"}, {"type": "vox-model", "scale": [1, 1, 1], "url": "https://media-crvox.sfo2.digitaloceanspaces.com/0xb60d86d5dc2ff95766ea16e370edc8845faa105f/1638722977719-1f5c754c-08a0-4946-9383-3a10676004fa.vox", "flipX": true, "position": [-4, 8.75, -6.6], "rotation": [0, -1.5708, 0], "version": "15062", "uuid": "dadc603c-908a-4541-835e-e3bb5e980885", "animation": {"destination": null, "keyframes": []}}, {"type": "vox-model", "scale": [1, 1, 1], "rotation": [0, -1.5708, 0], "url": "https://media-crvox.sfo2.digitaloceanspaces.com/0xb60d86d5dc2ff95766ea16e370edc8845faa105f/1638722977719-1f5c754c-08a0-4946-9383-3a10676004fa.vox", "animation": {"destination": null, "keyframes": []}, "flipX": true, "position": [4.5, 8.75, -6.6], "version": "15062", "uuid": "f2b3a574-dff4-4487-ad1e-0bdc8ab552ea"}, {"type": "vox-model", "scale": [1, 1, 1], "rotation": [0, -1.5708, 0], "url": "https://media-crvox.sfo2.digitaloceanspaces.com/0xb60d86d5dc2ff95766ea16e370edc8845faa105f/1638722977719-1f5c754c-08a0-4946-9383-3a10676004fa.vox", "animation": {"destination": null, "keyframes": []}, "flipX": true, "position": [4.5, 8.75, 6.9], "version": "15062", "uuid": "60f34815-d841-438e-aeb3-96736942ffb9"}, {"type": "vox-model", "scale": [1, 1, 1], "rotation": [0, -1.5708, 0], "url": "https://media-crvox.sfo2.digitaloceanspaces.com/0xb60d86d5dc2ff95766ea16e370edc8845faa105f/1638722977719-1f5c754c-08a0-4946-9383-3a10676004fa.vox", "animation": {"destination": null, "keyframes": []}, "flipX": true, "position": [-4, 8.75, 6.9], "version": "15062", "uuid": "e263ca27-15af-4915-a3ce-77ccb9057a9a"}, {"type": "vox-model", "scale": [1, 1, 1], "rotation": [0, -1.5708, 0], "url": "https://media-crvox.sfo2.digitaloceanspaces.com/0xb60d86d5dc2ff95766ea16e370edc8845faa105f/1638722977719-1f5c754c-08a0-4946-9383-3a10676004fa.vox", "animation": {"destination": null, "keyframes": []}, "flipX": true, "position": [-4, 1.25, -6.6], "version": "15062", "uuid": "5b497d87-a0a8-417a-bc34-55c24a38ae3a"}, {"type": "vox-model", "scale": [1, 1, 1], "rotation": [0, -1.5708, 0], "url": "https://media-crvox.sfo2.digitaloceanspaces.com/0xb60d86d5dc2ff95766ea16e370edc8845faa105f/1638722977719-1f5c754c-08a0-4946-9383-3a10676004fa.vox", "animation": {"destination": null, "keyframes": []}, "flipX": true, "position": [-4, 1.25, 6.9], "version": "15062", "uuid": "c1dd6864-f700-4d9f-a2ff-f7b238b02b2c"}, {"type": "slider-input", "scale": [1, 0.25, 0], "position": [0.5, 1.88, -2.25], "rotation": [0, 0, 0], "version": "15062", "uuid": "398f7fb0-437a-4690-8aad-285e7fdb83dd", "minimum": 1, "maximum": 10, "default": 1, "text": "0", "id": "rightPlayerSlider", "specularColor": [0.3176470588235294, 0.8, 0.3803921568627451], "script": "let slider = parcel.getFeatureById('rightPlayerSlider')\nslider.on('changed',e=>{\nslider.set({\n      text: Math.round(e.value).toString()})\n})\n"}, {"type": "vox-model", "scale": [1, 1, 1], "rotation": [0, 0, 0], "url": "https://media-crvox.sfo2.digitaloceanspaces.com/0xb60d86d5dc2ff95766ea16e370edc8845faa105f/1638722977719-1f5c754c-08a0-4946-9383-3a10676004fa.vox", "animation": {"destination": null, "keyframes": []}, "flipX": true, "position": [-3.25, 0.75, -2.25], "version": "15062", "uuid": "f1e646b1-fd77-43c0-ae48-9601b067efbb"}, {"type": "vox-model", "scale": [1, 1, 1], "rotation": [0, 0, 0], "url": "https://media-crvox.sfo2.digitaloceanspaces.com/0xb60d86d5dc2ff95766ea16e370edc8845faa105f/1638722977719-1f5c754c-08a0-4946-9383-3a10676004fa.vox", "animation": {"destination": null, "keyframes": []}, "flipX": true, "position": [-2.5, 0.75, -2.25], "version": "15062", "uuid": "6971c7a0-cead-4bd7-88e0-8fdc129487d1"}, {"type": "vox-model", "scale": [1, 1, 1], "rotation": [0, 0, 0], "url": "https://media-crvox.sfo2.digitaloceanspaces.com/0xb60d86d5dc2ff95766ea16e370edc8845faa105f/1638722977719-1f5c754c-08a0-4946-9383-3a10676004fa.vox", "animation": {"destination": null, "keyframes": []}, "flipX": true, "position": [-3.25, 0.75, -2.75], "version": "15062", "uuid": "2ed99d88-5488-4330-85e6-3fb457be2591"}, {"type": "vox-model", "scale": [1, 1, 1], "rotation": [0, 0, 0], "url": "https://media-crvox.sfo2.digitaloceanspaces.com/0xb60d86d5dc2ff95766ea16e370edc8845faa105f/1638722977719-1f5c754c-08a0-4946-9383-3a10676004fa.vox", "animation": {"destination": null, "keyframes": []}, "flipX": true, "position": [-3.25, 0.75, -3.25], "version": "15062", "uuid": "9fd8cdbc-061d-4b08-858b-89dd8e796a7e"}, {"type": "vox-model", "scale": [1, 1, 1], "rotation": [0, 0, 0], "url": "https://media-crvox.sfo2.digitaloceanspaces.com/0xb60d86d5dc2ff95766ea16e370edc8845faa105f/1638722977719-1f5c754c-08a0-4946-9383-3a10676004fa.vox", "animation": {"destination": null, "keyframes": []}, "flipX": true, "position": [-3.25, 0.75, -3.75], "version": "15062", "uuid": "e0724f81-66de-46d2-acce-448a4cef8923"}, {"type": "vox-model", "scale": [1, 1, 1], "rotation": [0, 0, 0], "url": "https://media-crvox.sfo2.digitaloceanspaces.com/0xb60d86d5dc2ff95766ea16e370edc8845faa105f/1638722977719-1f5c754c-08a0-4946-9383-3a10676004fa.vox", "animation": {"destination": null, "keyframes": []}, "flipX": true, "position": [-3.25, 0.75, -4.25], "version": "15062", "uuid": "e8c7975e-0607-4471-bb38-118e871176ea"}, {"type": "vox-model", "scale": [1, 1, 1], "rotation": [0, 0, 0], "url": "https://media-crvox.sfo2.digitaloceanspaces.com/0xb60d86d5dc2ff95766ea16e370edc8845faa105f/1638722977719-1f5c754c-08a0-4946-9383-3a10676004fa.vox", "animation": {"destination": null, "keyframes": []}, "flipX": true, "position": [-2.5, 0.75, -2.75], "version": "15062", "uuid": "073d1ba5-71f8-4284-805b-380a5184f7bd"}, {"type": "vox-model", "scale": [1, 1, 1], "rotation": [0, 0, 0], "url": "https://media-crvox.sfo2.digitaloceanspaces.com/0xb60d86d5dc2ff95766ea16e370edc8845faa105f/1638722977719-1f5c754c-08a0-4946-9383-3a10676004fa.vox", "animation": {"destination": null, "keyframes": []}, "flipX": true, "position": [-2.5, 0.75, -3.25], "version": "15062", "uuid": "81432121-3d31-4af3-96c5-f5cb173c41aa"}, {"type": "vox-model", "scale": [1, 1, 1], "rotation": [0, 0, 0], "url": "https://media-crvox.sfo2.digitaloceanspaces.com/0xb60d86d5dc2ff95766ea16e370edc8845faa105f/1638722977719-1f5c754c-08a0-4946-9383-3a10676004fa.vox", "animation": {"destination": null, "keyframes": []}, "flipX": true, "position": [-2.5, 0.75, -3.75], "version": "15062", "uuid": "f0e45016-71ed-48f6-9cbb-c9a47611aa07"}, {"type": "vox-model", "scale": [1, 1, 1], "rotation": [0, 0, 0], "url": "https://media-crvox.sfo2.digitaloceanspaces.com/0xb60d86d5dc2ff95766ea16e370edc8845faa105f/1638722977719-1f5c754c-08a0-4946-9383-3a10676004fa.vox", "animation": {"destination": null, "keyframes": []}, "flipX": true, "position": [-2.5, 0.75, -4.25], "version": "15062", "uuid": "14a14b97-6875-47b5-ad0f-732c744029e3"}, {"type": "vox-model", "scale": [1, 1, 1], "rotation": [0, 3.14159, 0], "url": "https://media-crvox.sfo2.digitaloceanspaces.com/0xb60d86d5dc2ff95766ea16e370edc8845faa105f/1638722977719-1f5c754c-08a0-4946-9383-3a10676004fa.vox", "animation": {"destination": null, "keyframes": []}, "flipX": true, "position": [-2.3, 0.75, 2.75], "version": "15062", "uuid": "b684f331-ef7f-41c2-921b-150a8c0ad119"}, {"type": "vox-model", "scale": [1, 1, 1], "rotation": [0, 3.14159, 0], "url": "https://media-crvox.sfo2.digitaloceanspaces.com/0xb60d86d5dc2ff95766ea16e370edc8845faa105f/1638722977719-1f5c754c-08a0-4946-9383-3a10676004fa.vox", "animation": {"destination": null, "keyframes": []}, "flipX": true, "position": [-3, 0.75, 2.75], "version": "15062", "uuid": "9dbac830-d520-4b81-80a8-153f0cfbb82c"}, {"type": "vox-model", "scale": [1, 1, 1], "rotation": [0, 3.14159, 0], "url": "https://media-crvox.sfo2.digitaloceanspaces.com/0xb60d86d5dc2ff95766ea16e370edc8845faa105f/1638722977719-1f5c754c-08a0-4946-9383-3a10676004fa.vox", "animation": {"destination": null, "keyframes": []}, "flipX": true, "position": [-3, 0.75, 3.25], "version": "15062", "uuid": "3da5024a-0e40-4b0c-b133-092b56a7126c"}, {"type": "vox-model", "scale": [1, 1, 1], "rotation": [0, 3.14159, 0], "url": "https://media-crvox.sfo2.digitaloceanspaces.com/0xb60d86d5dc2ff95766ea16e370edc8845faa105f/1638722977719-1f5c754c-08a0-4946-9383-3a10676004fa.vox", "animation": {"destination": null, "keyframes": []}, "flipX": true, "position": [-3, 0.75, 3.75], "version": "15062", "uuid": "e383e822-be13-46b7-b4fe-7d4b29d6f852"}, {"type": "vox-model", "scale": [1, 1, 1], "rotation": [0, 3.14159, 0], "url": "https://media-crvox.sfo2.digitaloceanspaces.com/0xb60d86d5dc2ff95766ea16e370edc8845faa105f/1638722977719-1f5c754c-08a0-4946-9383-3a10676004fa.vox", "animation": {"destination": null, "keyframes": []}, "flipX": true, "position": [-3, 0.75, 4.25], "version": "15062", "uuid": "e748c78f-ead1-4683-a275-e7db184de552"}, {"type": "vox-model", "scale": [1, 1, 1], "rotation": [0, 3.14159, 0], "url": "https://media-crvox.sfo2.digitaloceanspaces.com/0xb60d86d5dc2ff95766ea16e370edc8845faa105f/1638722977719-1f5c754c-08a0-4946-9383-3a10676004fa.vox", "animation": {"destination": null, "keyframes": []}, "flipX": true, "position": [-3, 0.75, 4.75], "version": "15327", "uuid": "cefccd35-c2a8-4351-acf5-77351f515197"}, {"type": "vox-model", "scale": [1, 1, 1], "rotation": [0, 3.14159, 0], "url": "https://media-crvox.sfo2.digitaloceanspaces.com/0xb60d86d5dc2ff95766ea16e370edc8845faa105f/1638722977719-1f5c754c-08a0-4946-9383-3a10676004fa.vox", "animation": {"destination": null, "keyframes": []}, "flipX": true, "position": [-2.25, 0.75, 3.25], "version": "15062", "uuid": "acfe3514-f027-4725-a49b-9fd52f4f8be4"}, {"type": "vox-model", "scale": [1, 1, 1], "rotation": [0, 3.14159, 0], "url": "https://media-crvox.sfo2.digitaloceanspaces.com/0xb60d86d5dc2ff95766ea16e370edc8845faa105f/1638722977719-1f5c754c-08a0-4946-9383-3a10676004fa.vox", "animation": {"destination": null, "keyframes": []}, "flipX": true, "position": [-2.25, 0.75, 3.75], "version": "15062", "uuid": "6d385d5a-3fc0-41c5-ae4d-6f7a3447cd69"}, {"type": "vox-model", "scale": [1, 1, 1], "rotation": [0, 3.14159, 0], "url": "https://media-crvox.sfo2.digitaloceanspaces.com/0xb60d86d5dc2ff95766ea16e370edc8845faa105f/1638722977719-1f5c754c-08a0-4946-9383-3a10676004fa.vox", "animation": {"destination": null, "keyframes": []}, "flipX": true, "position": [-2.25, 0.75, 4.25], "version": "15327", "uuid": "204e466d-b654-4cf8-b152-c4e97d99e243"}, {"type": "vox-model", "scale": [1, 1, 1], "rotation": [0, 3.14159, 0], "url": "https://media-crvox.sfo2.digitaloceanspaces.com/0xb60d86d5dc2ff95766ea16e370edc8845faa105f/1638722977719-1f5c754c-08a0-4946-9383-3a10676004fa.vox", "animation": {"destination": null, "keyframes": []}, "flipX": true, "position": [-2.25, 0.75, 4.75], "version": "15062", "uuid": "615360eb-e6b5-4868-8b7f-7c7dedbbc1bb"}, {"type": "button", "scale": [0.5, 0.5, 0.5], "text": "A", "position": [0.45, 1.5, -2.2], "rotation": [-1.5708, 0, 0], "version": "15062", "uuid": "63df1fcc-ca1e-4536-ad78-0b007149e7b7", "id": "rightConfirmButton"}, {"type": "slider-input", "scale": [1, 0.25, 0], "position": [0.5, 1.75, 2.75], "rotation": [0, 3.14159, 0], "version": "15062", "uuid": "bf3a15b2-f1ee-4812-affd-877ffc725756", "id": "leftPlayerSlider", "minimum": 1, "maximum": 10, "default": 1, "text": "0"}, {"type": "button", "scale": [0.5, 0.5, 0.5], "text": "A", "position": [0.55, 1.35, 2.7], "rotation": [-1.5708, 3.14159, 0], "version": "15062", "uuid": "88cf8e4c-f0c4-41be-a9d4-20ab64d0dca0"}, {"type": "image", "scale": [1, 1, 0.01], "url": "https://ipfs.zesty.market/ipfs/QmcYkZ3d31XVg62cD1mfsuu5gqPvvjeYeAcnS4Jjx5Vso1", "position": [-0.75, 1.75, -2.25], "rotation": [0, 0, 0], "version": "16092", "uuid": "259e1fb7-21da-434d-a869-79d642b109c8", "animation": {"destination": null, "keyframes": []}, "blendMode": "Combine", "stretch": true, "transparent": "AlphaBlend", "opacity": "1.00", "updateDaily": true, "uScale": 1, "vScale": 1, "script": "// Helpers\n\n/**\n * Parses ipfs:// and ar:// links and IPFS hashes to URLs.\n * @param {String} uri The ipfs:// link or IPFS hash.\n * @returns A formatted URL to the IPFS resource.\n */\n const parseProtocol = uri => {\n  if (uri.substring(0,4) === \"ipfs\") {\n    return `https://ipfs.zesty.market/ipfs/${uri.substring(7)}`;\n  } else if (uri.substring(0,4) === \"http\") {\n    return uri;\n  } else if (uri.substring(0,5) === \"https\") {\n    return uri;\n  } else if (uri.substring(0,2) === \"ar\") {\n    // get redirected url\n    fetch(`https://arweave.net/${uri.substring(5)}`)\n      .then(res => {\n        return res.url;\n      })\n      .catch(err => {\n        console.error(err);\n      })\n\n  } else {\n    // default to ipfs\n    return `https://ipfs.zesty.market/ipfs/${uri}`;\n  }\n}\n\n// Formats\nconst formats = {\n    'tall': {\n        width: 0.75,\n        height: 1,\n        style: {\n            'standard': 'https://ipfs.fleek.co/ipns/lib.zesty.market/assets/zesty-banner-tall.png',\n            'minimal': 'https://ipfs.fleek.co/ipns/lib.zesty.market/assets/zesty-banner-tall-minimal.png',\n            'transparent': 'https://ipfs.fleek.co/ipns/lib.zesty.market/assets/zesty-banner-tall-transparent.png'\n        }\n    },\n    'wide': {\n        width: 4,\n        height: 1,\n        style: {\n            'standard': 'https://ipfs.fleek.co/ipns/lib.zesty.market/assets/zesty-banner-wide.png',\n            'minimal': 'https://ipfs.fleek.co/ipns/lib.zesty.market/assets/zesty-banner-wide-minimal.png',\n            'transparent': 'https://ipfs.fleek.co/ipns/lib.zesty.market/assets/zesty-banner-wide-transparent.png'\n        }\n    },\n    'square': {\n        width: 1,\n        height: 1,\n        style: {\n            'standard': 'https://ipfs.fleek.co/ipns/lib.zesty.market/assets/zesty-banner-square.png',\n            'minimal': 'https://ipfs.fleek.co/ipns/lib.zesty.market/assets/zesty-banner-square-minimal.png',\n            'transparent': 'https://ipfs.fleek.co/ipns/lib.zesty.market/assets/zesty-banner-square-transparent.png'\n        }\n    }\n}\n\nconst defaultFormat = 'square';\nconst defaultStyle = 'standard';\n\n// Networking\nconst API_BASE = 'https://beacon.zesty.market'\n\nconst ENDPOINTS = {\n    \"matic\": 'https://api.thegraph.com/subgraphs/name/zestymarket/zesty-market-graph-matic',\n    \"polygon\": 'https://api.thegraph.com/subgraphs/name/zestymarket/zesty-market-graph-matic',\n    \"rinkeby\": 'https://api.thegraph.com/subgraphs/name/zestymarket/zesty-market-graph-rinkeby'\n}\n\nconst DEFAULT_DATAS = {\n  \"uri\": undefined,\n}\n\nconst DEFAULT_URI_CONTENT = {\n  \"name\": \"Default banner\",\n  \"description\": \"This is the default banner that would be displayed ipsum\",\n  \"image\": \"https://ipfs.zesty.market/ipfs/QmWBNfP8roDrwz3XQo4qpu9fMxvUSTn8LB7d4JK7ybrfZ2/assets/zesty-ad-square.png\",\n  \"url\": \"https://www.zesty.market\"\n}\n\n/**\n * Queries The Graph to retrieve NFT information for the space.\n * @param {string} space The space ID\n * @param {string} creator The wallet address of the creator\n * @param {string} network The network to post metrics to\n * @returns An object with the requested space information, or a default if it cannot be retrieved.\n */\nconst fetchNFT = async (space, creator, network = 'polygon') => {\n    const currentTime = Math.floor(Date.now() / 1000);\n    const query = {\n        query: `\n      query {\n        tokenDatas (\n          where: {\n            id: \"${space}\"\n            creator: \"${creator}\"\n          }\n        )\n        { \n          sellerNFTSetting {\n            sellerAuctions (\n              first: 5\n              where: {\n                contractTimeStart_lte: ${currentTime}\n                contractTimeEnd_gte: ${currentTime}\n              }\n            ) {\n              id\n              buyerCampaigns {\n                id\n                uri\n              }\n              buyerCampaignsApproved\n            }\n          }\n          id\n        }\n      }\n    `\n    };\n  return fetch(ENDPOINTS[network], {\n    method: 'POST',\n    mode: 'cors',\n    body: JSON.stringify(query)\n  })\n  .then((res) => {\n    return parseGraphResponse(res);\n  })\n  .catch((err) => {\n    console.log(err);\n    return DEFAULT_DATAS;\n  })\n};\n\n/**\n * Parses the response from The Graph to find the latest auction campaign.\n * @param {Object} res The response object from The Graph.\n * @returns An object containing either the latest auction campaign or default data.\n */\nconst parseGraphResponse = async res => {\n  let body = await res.json();\n  let tokenDatas = body.data.tokenDatas;\n  if (tokenDatas.length == 0) return DEFAULT_DATAS;\n\n  let sellerAuction = body.data.tokenDatas[0].sellerNFTSetting.sellerAuctions[0];\n  let latestAuction = null;\n  for (let i=0; i < sellerAuction.buyerCampaignsApproved.length; i++) {\n    if (sellerAuction.buyerCampaignsApproved[i] && sellerAuction.buyerCampaigns.length > 0) {\n      latestAuction = sellerAuction.buyerCampaigns[i];           \n    }\n  }\n\n  if (latestAuction == null) {\n    return DEFAULT_DATAS \n  }\n\n  return latestAuction;\n}\n\n/**\n * Pulls data from IPFS for the banner content.\n * @param {string} uri The IPFS URI containing the banner content.\n * @param {string} format The default banner image format to use if there is no active banner.\n * @param {string} style The default banner image style to use if there is no active banner.\n * @returns An object with the requested banner content, or a default if it cannot be retrieved.\n */\nconst fetchActiveBanner = async (uri, format, style) => {\n  if (!uri) {\n    let bannerObject = { uri: 'DEFAULT_URI', data: DEFAULT_URI_CONTENT };\n    let newFormat = format || defaultFormat;\n    let newStyle = style || defaultStyle;\n    bannerObject.data.image = formats[newFormat].style[newStyle];\n    return bannerObject;\n  }\n\n  return fetch(parseProtocol(uri))\n  .then(async (res) => {\n     let data = await res.json();\n     return res.status == 200 ? { uri: uri, data: data } : null\n  })\n}\n\nfunction sendOnLoadMetric(space) {\n    try {\n        const spaceCounterEndpoint = API_BASE + `/api/v1/space/${space}`\n        fetch(spaceCounterEndpoint, { method: 'PUT' });\n    } catch (e) {\n        console.log(\"Failed to emit onload event\", e.message)\n    }\n}\n\nasync function loadBanner(space, creator, network, format, style, beacon = false) {\n    let uri = null;\n    const activeNFT = await fetchNFT(space, creator, network);\n    if (activeNFT) uri = activeNFT.uri;\n    const activeBanner = await fetchActiveBanner(uri, format, style);\n\n    // Need to add https:// if missing for page to open properly\n    let url = activeBanner.data.url;\n    url = url.match(/^http[s]?:\\/\\//) ? url : 'https://' + url;\n\n    if (url == 'https://www.zesty.market') {\n        url = `https://app.zesty.market/space/${space}`;\n    }\n\n    let image = activeBanner.data.image;\n    image = image.match(/^.+\\.(png|jpe?g)/i) ? image : parseProtocol(image);\n\n    if (beacon) {\n        sendOnLoadMetric(space);\n    }\n\n    feature.set({'url': image, 'link': url});\n}\n\n// Call loadBanner here. Parameters are:\n// Space ID, Creator ID, Network, Format, Style, Enable Beacon (optional)\nloadBanner('89', '0x1ce139b73dbc1d855e4b360856ac3885558fc5f8', 'polygon', 'square', 'standard', true);", "groupId": null, "link": "https://vrshop.rebuffreality.com/"}, {"type": "guest-book", "scale": [1, 1, 1], "signature_text": "Welcome to the Anoncat Cryptovoxels Clubhouse! Feel free to explore and hopefully meet other Anoncats :D", "position": [-3.75, 1.25, -5.75], "rotation": [0, -4.71239, 0], "version": "15327", "uuid": "0c2362ae-b1a1-4faa-bf48-693f2103887e"}, {"type": "image", "scale": [1, 1, 0.01], "url": "https://ipfs.zesty.market/ipfs/QmcYkZ3d31XVg62cD1mfsuu5gqPvvjeYeAcnS4Jjx5Vso1", "position": [1.75, 1.75, -2.25], "rotation": [0, 0, 0], "version": "16092", "uuid": "5cf0f2cb-16d5-4075-a02f-594794471e5b", "animation": {"destination": null, "keyframes": []}, "blendMode": "Combine", "stretch": true, "transparent": "AlphaBlend", "opacity": "1.00", "updateDaily": true, "uScale": 1, "vScale": 1, "script": "// Helpers\n\n/**\n * Parses ipfs:// and ar:// links and IPFS hashes to URLs.\n * @param {String} uri The ipfs:// link or IPFS hash.\n * @returns A formatted URL to the IPFS resource.\n */\n const parseProtocol = uri => {\n  if (uri.substring(0,4) === \"ipfs\") {\n    return `https://ipfs.zesty.market/ipfs/${uri.substring(7)}`;\n  } else if (uri.substring(0,4) === \"http\") {\n    return uri;\n  } else if (uri.substring(0,5) === \"https\") {\n    return uri;\n  } else if (uri.substring(0,2) === \"ar\") {\n    // get redirected url\n    fetch(`https://arweave.net/${uri.substring(5)}`)\n      .then(res => {\n        return res.url;\n      })\n      .catch(err => {\n        console.error(err);\n      })\n\n  } else {\n    // default to ipfs\n    return `https://ipfs.zesty.market/ipfs/${uri}`;\n  }\n}\n\n// Formats\nconst formats = {\n    'tall': {\n        width: 0.75,\n        height: 1,\n        style: {\n            'standard': 'https://ipfs.fleek.co/ipns/lib.zesty.market/assets/zesty-banner-tall.png',\n            'minimal': 'https://ipfs.fleek.co/ipns/lib.zesty.market/assets/zesty-banner-tall-minimal.png',\n            'transparent': 'https://ipfs.fleek.co/ipns/lib.zesty.market/assets/zesty-banner-tall-transparent.png'\n        }\n    },\n    'wide': {\n        width: 4,\n        height: 1,\n        style: {\n            'standard': 'https://ipfs.fleek.co/ipns/lib.zesty.market/assets/zesty-banner-wide.png',\n            'minimal': 'https://ipfs.fleek.co/ipns/lib.zesty.market/assets/zesty-banner-wide-minimal.png',\n            'transparent': 'https://ipfs.fleek.co/ipns/lib.zesty.market/assets/zesty-banner-wide-transparent.png'\n        }\n    },\n    'square': {\n        width: 1,\n        height: 1,\n        style: {\n            'standard': 'https://ipfs.fleek.co/ipns/lib.zesty.market/assets/zesty-banner-square.png',\n            'minimal': 'https://ipfs.fleek.co/ipns/lib.zesty.market/assets/zesty-banner-square-minimal.png',\n            'transparent': 'https://ipfs.fleek.co/ipns/lib.zesty.market/assets/zesty-banner-square-transparent.png'\n        }\n    }\n}\n\nconst defaultFormat = 'square';\nconst defaultStyle = 'standard';\n\n// Networking\nconst API_BASE = 'https://beacon.zesty.market'\n\nconst ENDPOINTS = {\n    \"matic\": 'https://api.thegraph.com/subgraphs/name/zestymarket/zesty-market-graph-matic',\n    \"polygon\": 'https://api.thegraph.com/subgraphs/name/zestymarket/zesty-market-graph-matic',\n    \"rinkeby\": 'https://api.thegraph.com/subgraphs/name/zestymarket/zesty-market-graph-rinkeby'\n}\n\nconst DEFAULT_DATAS = {\n  \"uri\": undefined,\n}\n\nconst DEFAULT_URI_CONTENT = {\n  \"name\": \"Default banner\",\n  \"description\": \"This is the default banner that would be displayed ipsum\",\n  \"image\": \"https://ipfs.zesty.market/ipfs/QmWBNfP8roDrwz3XQo4qpu9fMxvUSTn8LB7d4JK7ybrfZ2/assets/zesty-ad-square.png\",\n  \"url\": \"https://www.zesty.market\"\n}\n\n/**\n * Queries The Graph to retrieve NFT information for the space.\n * @param {string} space The space ID\n * @param {string} creator The wallet address of the creator\n * @param {string} network The network to post metrics to\n * @returns An object with the requested space information, or a default if it cannot be retrieved.\n */\nconst fetchNFT = async (space, creator, network = 'polygon') => {\n    const currentTime = Math.floor(Date.now() / 1000);\n    const query = {\n        query: `\n      query {\n        tokenDatas (\n          where: {\n            id: \"${space}\"\n            creator: \"${creator}\"\n          }\n        )\n        { \n          sellerNFTSetting {\n            sellerAuctions (\n              first: 5\n              where: {\n                contractTimeStart_lte: ${currentTime}\n                contractTimeEnd_gte: ${currentTime}\n              }\n            ) {\n              id\n              buyerCampaigns {\n                id\n                uri\n              }\n              buyerCampaignsApproved\n            }\n          }\n          id\n        }\n      }\n    `\n    };\n  return fetch(ENDPOINTS[network], {\n    method: 'POST',\n    mode: 'cors',\n    body: JSON.stringify(query)\n  })\n  .then((res) => {\n    return parseGraphResponse(res);\n  })\n  .catch((err) => {\n    console.log(err);\n    return DEFAULT_DATAS;\n  })\n};\n\n/**\n * Parses the response from The Graph to find the latest auction campaign.\n * @param {Object} res The response object from The Graph.\n * @returns An object containing either the latest auction campaign or default data.\n */\nconst parseGraphResponse = async res => {\n  let body = await res.json();\n  let tokenDatas = body.data.tokenDatas;\n  if (tokenDatas.length == 0) return DEFAULT_DATAS;\n\n  let sellerAuction = body.data.tokenDatas[0].sellerNFTSetting.sellerAuctions[0];\n  let latestAuction = null;\n  for (let i=0; i < sellerAuction.buyerCampaignsApproved.length; i++) {\n    if (sellerAuction.buyerCampaignsApproved[i] && sellerAuction.buyerCampaigns.length > 0) {\n      latestAuction = sellerAuction.buyerCampaigns[i];           \n    }\n  }\n\n  if (latestAuction == null) {\n    return DEFAULT_DATAS \n  }\n\n  return latestAuction;\n}\n\n/**\n * Pulls data from IPFS for the banner content.\n * @param {string} uri The IPFS URI containing the banner content.\n * @param {string} format The default banner image format to use if there is no active banner.\n * @param {string} style The default banner image style to use if there is no active banner.\n * @returns An object with the requested banner content, or a default if it cannot be retrieved.\n */\nconst fetchActiveBanner = async (uri, format, style) => {\n  if (!uri) {\n    let bannerObject = { uri: 'DEFAULT_URI', data: DEFAULT_URI_CONTENT };\n    let newFormat = format || defaultFormat;\n    let newStyle = style || defaultStyle;\n    bannerObject.data.image = formats[newFormat].style[newStyle];\n    return bannerObject;\n  }\n\n  return fetch(parseProtocol(uri))\n  .then(async (res) => {\n     let data = await res.json();\n     return res.status == 200 ? { uri: uri, data: data } : null\n  })\n}\n\nfunction sendOnLoadMetric(space) {\n    try {\n        const spaceCounterEndpoint = API_BASE + `/api/v1/space/${space}`\n        fetch(spaceCounterEndpoint, { method: 'PUT' });\n    } catch (e) {\n        console.log(\"Failed to emit onload event\", e.message)\n    }\n}\n\nasync function loadBanner(space, creator, network, format, style, beacon = false) {\n    let uri = null;\n    const activeNFT = await fetchNFT(space, creator, network);\n    if (activeNFT) uri = activeNFT.uri;\n    const activeBanner = await fetchActiveBanner(uri, format, style);\n\n    // Need to add https:// if missing for page to open properly\n    let url = activeBanner.data.url;\n    url = url.match(/^http[s]?:\\/\\//) ? url : 'https://' + url;\n\n    if (url == 'https://www.zesty.market') {\n        url = `https://app.zesty.market/space/${space}`;\n    }\n\n    let image = activeBanner.data.image;\n    image = image.match(/^.+\\.(png|jpe?g)/i) ? image : parseProtocol(image);\n\n    if (beacon) {\n        sendOnLoadMetric(space);\n    }\n\n    feature.set({'url': image, 'link': url});\n}\n\n// Call loadBanner here. Parameters are:\n// Space ID, Creator ID, Network, Format, Style, Enable Beacon (optional)\nloadBanner('89', '0x1ce139b73dbc1d855e4b360856ac3885558fc5f8', 'polygon', 'square', 'standard');", "groupId": null, "isTrigger": false, "link": "https://vrshop.rebuffreality.com/"}, {"type": "image", "scale": [1, 1, 0.01], "rotation": [0, 3.14159, 0], "url": "", "animation": {"destination": null, "keyframes": []}, "position": [1.78, 1.75, 2.76], "version": "16168", "uuid": "d0f33d34-e7af-4119-90bb-935a8629e369", "blendMode": "Combine", "stretch": true, "transparent": "AlphaBlend", "opacity": "1.00", "updateDaily": true, "uScale": 1, "vScale": 1, "script": "// Helpers\n\n/**\n * Parses ipfs:// and ar:// links and IPFS hashes to URLs.\n * @param {String} uri The ipfs:// link or IPFS hash.\n * @returns A formatted URL to the IPFS resource.\n */\n const parseProtocol = uri => {\n  if (uri.substring(0,4) === \"ipfs\") {\n    return `https://ipfs.zesty.market/ipfs/${uri.substring(7)}`;\n  } else if (uri.substring(0,4) === \"http\") {\n    return uri;\n  } else if (uri.substring(0,5) === \"https\") {\n    return uri;\n  } else if (uri.substring(0,2) === \"ar\") {\n    // get redirected url\n    fetch(`https://arweave.net/${uri.substring(5)}`)\n      .then(res => {\n        return res.url;\n      })\n      .catch(err => {\n        console.error(err);\n      })\n\n  } else {\n    // default to ipfs\n    return `https://ipfs.zesty.market/ipfs/${uri}`;\n  }\n}\n\n// Formats\nconst formats = {\n    'tall': {\n        width: 0.75,\n        height: 1,\n        style: {\n            'standard': 'https://ipfs.fleek.co/ipns/lib.zesty.market/assets/zesty-banner-tall.png',\n            'minimal': 'https://ipfs.fleek.co/ipns/lib.zesty.market/assets/zesty-banner-tall-minimal.png',\n            'transparent': 'https://ipfs.fleek.co/ipns/lib.zesty.market/assets/zesty-banner-tall-transparent.png'\n        }\n    },\n    'wide': {\n        width: 4,\n        height: 1,\n        style: {\n            'standard': 'https://ipfs.fleek.co/ipns/lib.zesty.market/assets/zesty-banner-wide.png',\n            'minimal': 'https://ipfs.fleek.co/ipns/lib.zesty.market/assets/zesty-banner-wide-minimal.png',\n            'transparent': 'https://ipfs.fleek.co/ipns/lib.zesty.market/assets/zesty-banner-wide-transparent.png'\n        }\n    },\n    'square': {\n        width: 1,\n        height: 1,\n        style: {\n            'standard': 'https://ipfs.fleek.co/ipns/lib.zesty.market/assets/zesty-banner-square.png',\n            'minimal': 'https://ipfs.fleek.co/ipns/lib.zesty.market/assets/zesty-banner-square-minimal.png',\n            'transparent': 'https://ipfs.fleek.co/ipns/lib.zesty.market/assets/zesty-banner-square-transparent.png'\n        }\n    }\n}\n\nconst defaultFormat = 'square';\nconst defaultStyle = 'standard';\n\n// Networking\nconst API_BASE = 'https://beacon.zesty.market'\n\nconst ENDPOINTS = {\n    \"matic\": 'https://api.thegraph.com/subgraphs/name/zestymarket/zesty-market-graph-matic',\n    \"polygon\": 'https://api.thegraph.com/subgraphs/name/zestymarket/zesty-market-graph-matic',\n    \"rinkeby\": 'https://api.thegraph.com/subgraphs/name/zestymarket/zesty-market-graph-rinkeby'\n}\n\nconst DEFAULT_DATAS = {\n  \"uri\": undefined,\n}\n\nconst DEFAULT_URI_CONTENT = {\n  \"name\": \"Default banner\",\n  \"description\": \"This is the default banner that would be displayed ipsum\",\n  \"image\": \"https://ipfs.zesty.market/ipfs/QmWBNfP8roDrwz3XQo4qpu9fMxvUSTn8LB7d4JK7ybrfZ2/assets/zesty-ad-square.png\",\n  \"url\": \"https://www.zesty.market\"\n}\n\n/**\n * Queries The Graph to retrieve NFT information for the space.\n * @param {string} space The space ID\n * @param {string} creator The wallet address of the creator\n * @param {string} network The network to post metrics to\n * @returns An object with the requested space information, or a default if it cannot be retrieved.\n */\nconst fetchNFT = async (space, creator, network = 'polygon') => {\n    const currentTime = Math.floor(Date.now() / 1000);\n    const query = {\n        query: `\n      query {\n        tokenDatas (\n          where: {\n            id: \"${space}\"\n            creator: \"${creator}\"\n          }\n        )\n        { \n          sellerNFTSetting {\n            sellerAuctions (\n              first: 5\n              where: {\n                contractTimeStart_lte: ${currentTime}\n                contractTimeEnd_gte: ${currentTime}\n              }\n            ) {\n              id\n              buyerCampaigns {\n                id\n                uri\n              }\n              buyerCampaignsApproved\n            }\n          }\n          id\n        }\n      }\n    `\n    };\n  return fetch(ENDPOINTS[network], {\n    method: 'POST',\n    mode: 'cors',\n    body: JSON.stringify(query)\n  })\n  .then((res) => {\n    return parseGraphResponse(res);\n  })\n  .catch((err) => {\n    console.log(err);\n    return DEFAULT_DATAS;\n  })\n};\n\n/**\n * Parses the response from The Graph to find the latest auction campaign.\n * @param {Object} res The response object from The Graph.\n * @returns An object containing either the latest auction campaign or default data.\n */\nconst parseGraphResponse = async res => {\n  let body = await res.json();\n  let tokenDatas = body.data.tokenDatas;\n  if (tokenDatas.length == 0) return DEFAULT_DATAS;\n\n  let sellerAuction = body.data.tokenDatas[0].sellerNFTSetting.sellerAuctions[0];\n  let latestAuction = null;\n  for (let i=0; i < sellerAuction.buyerCampaignsApproved.length; i++) {\n    if (sellerAuction.buyerCampaignsApproved[i] && sellerAuction.buyerCampaigns.length > 0) {\n      latestAuction = sellerAuction.buyerCampaigns[i];           \n    }\n  }\n\n  if (latestAuction == null) {\n    return DEFAULT_DATAS \n  }\n\n  return latestAuction;\n}\n\n/**\n * Pulls data from IPFS for the banner content.\n * @param {string} uri The IPFS URI containing the banner content.\n * @param {string} format The default banner image format to use if there is no active banner.\n * @param {string} style The default banner image style to use if there is no active banner.\n * @returns An object with the requested banner content, or a default if it cannot be retrieved.\n */\nconst fetchActiveBanner = async (uri, format, style) => {\n  if (!uri) {\n    let bannerObject = { uri: 'DEFAULT_URI', data: DEFAULT_URI_CONTENT };\n    let newFormat = format || defaultFormat;\n    let newStyle = style || defaultStyle;\n    bannerObject.data.image = formats[newFormat].style[newStyle];\n    return bannerObject;\n  }\n\n  return fetch(parseProtocol(uri))\n  .then(async (res) => {\n     let data = await res.json();\n     return res.status == 200 ? { uri: uri, data: data } : null\n  })\n}\n\nfunction sendOnLoadMetric(space) {\n    try {\n        const spaceCounterEndpoint = API_BASE + `/api/v1/space/${space}`\n        fetch(spaceCounterEndpoint, { method: 'PUT' });\n    } catch (e) {\n        console.log(\"Failed to emit onload event\", e.message)\n    }\n}\n\nasync function loadBanner(space, creator, network, format, style, beacon = false) {\n    let uri = null;\n    const activeNFT = await fetchNFT(space, creator, network);\n    if (activeNFT) uri = activeNFT.uri;\n    const activeBanner = await fetchActiveBanner(uri, format, style);\n\n    // Need to add https:// if missing for page to open properly\n    let url = activeBanner.data.url;\n    url = url.match(/^http[s]?:\\/\\//) ? url : 'https://' + url;\n\n    if (url == 'https://www.zesty.market') {\n        url = `https://app.zesty.market/space/${space}`;\n    }\n\n    let image = activeBanner.data.image;\n    image = image.match(/^.+\\.(png|jpe?g)/i) ? image : parseProtocol(image);\n\n    if (beacon) {\n        sendOnLoadMetric(space);\n    }\n\n    feature.set({'url': image, 'link': url});\n}\n\n// Call loadBanner here. Parameters are:\n// Space ID, Creator ID, Network, Format, Style, Enable Beacon (optional)\n\nloadBanner('89', '0x1ce139b73dbc1d855e4b360856ac3885558fc5f8', 'polygon', 'square', 'standard');", "groupId": null, "link": ""}, {"type": "image", "scale": [1, 1, 0.01], "url": "https://ipfs.zesty.market/ipfs/QmcYkZ3d31XVg62cD1mfsuu5gqPvvjeYeAcnS4Jjx5Vso1", "position": [-0.75, 1.75, 2.75], "rotation": [0, 3.14159, 0], "version": "16168", "uuid": "0d1ea5c0-0807-4442-b62c-5cca12f766cc", "animation": {"destination": null, "keyframes": []}, "blendMode": "Combine", "stretch": false, "transparent": "AlphaBlend", "opacity": "1.00", "updateDaily": true, "uScale": 1, "vScale": 1, "script": "// Helpers\n\n/**\n * Parses ipfs:// and ar:// links and IPFS hashes to URLs.\n * @param {String} uri The ipfs:// link or IPFS hash.\n * @returns A formatted URL to the IPFS resource.\n */\n const parseProtocol = uri => {\n  if (uri.substring(0,4) === \"ipfs\") {\n    return `https://ipfs.zesty.market/ipfs/${uri.substring(7)}`;\n  } else if (uri.substring(0,4) === \"http\") {\n    return uri;\n  } else if (uri.substring(0,5) === \"https\") {\n    return uri;\n  } else if (uri.substring(0,2) === \"ar\") {\n    // get redirected url\n    fetch(`https://arweave.net/${uri.substring(5)}`)\n      .then(res => {\n        return res.url;\n      })\n      .catch(err => {\n        console.error(err);\n      })\n\n  } else {\n    // default to ipfs\n    return `https://ipfs.zesty.market/ipfs/${uri}`;\n  }\n}\n\n// Formats\nconst formats = {\n    'tall': {\n        width: 0.75,\n        height: 1,\n        style: {\n            'standard': 'https://ipfs.io/ipns/lib.zesty.market/assets/zesty-banner-tall.png',\n            'minimal': 'https://ipfs.io/ipns/lib.zesty.market/assets/zesty-banner-tall-minimal.png',\n            'transparent': 'https://ipfs.io/ipns/lib.zesty.market/assets/zesty-banner-tall-transparent.png'\n        }\n    },\n    'wide': {\n        width: 4,\n        height: 1,\n        style: {\n            'standard': 'https://ipfs.fleek.co/ipns/lib.zesty.market/assets/zesty-banner-wide.png',\n            'minimal': 'https://ipfs.fleek.co/ipns/lib.zesty.market/assets/zesty-banner-wide-minimal.png',\n            'transparent': 'https://ipfs.fleek.co/ipns/lib.zesty.market/assets/zesty-banner-wide-transparent.png'\n        }\n    },\n    'square': {\n        width: 1,\n        height: 1,\n        style: {\n            'standard': 'https://ipfs.fleek.co/ipns/lib.zesty.market/assets/zesty-banner-square.png',\n            'minimal': 'https://ipfs.fleek.co/ipns/lib.zesty.market/assets/zesty-banner-square-minimal.png',\n            'transparent': 'https://ipfs.fleek.co/ipns/lib.zesty.market/assets/zesty-banner-square-transparent.png'\n        }\n    }\n}\n\nconst defaultFormat = 'square';\nconst defaultStyle = 'standard';\n\n// Networking\nconst API_BASE = 'https://beacon.zesty.market'\n\nconst ENDPOINTS = {\n    \"matic\": 'https://api.thegraph.com/subgraphs/name/zestymarket/zesty-market-graph-matic',\n    \"polygon\": 'https://api.thegraph.com/subgraphs/name/zestymarket/zesty-market-graph-matic',\n    \"rinkeby\": 'https://api.thegraph.com/subgraphs/name/zestymarket/zesty-market-graph-rinkeby'\n}\n\nconst DEFAULT_DATAS = {\n  \"uri\": undefined,\n}\n\nconst DEFAULT_URI_CONTENT = {\n  \"name\": \"Default banner\",\n  \"description\": \"This is the default banner that would be displayed ipsum\",\n  \"image\": \"https://ipfs.zesty.market/ipfs/QmWBNfP8roDrwz3XQo4qpu9fMxvUSTn8LB7d4JK7ybrfZ2/assets/zesty-ad-square.png\",\n  \"url\": \"https://www.zesty.market\"\n}\n\n/**\n * Queries The Graph to retrieve NFT information for the space.\n * @param {string} space The space ID\n * @param {string} creator The wallet address of the creator\n * @param {string} network The network to post metrics to\n * @returns An object with the requested space information, or a default if it cannot be retrieved.\n */\nconst fetchNFT = async (space, creator, network = 'polygon') => {\n    const currentTime = Math.floor(Date.now() / 1000);\n    const query = {\n        query: `\n      query {\n        tokenDatas (\n          where: {\n            id: \"${space}\"\n            creator: \"${creator}\"\n          }\n        )\n        { \n          sellerNFTSetting {\n            sellerAuctions (\n              first: 5\n              where: {\n                contractTimeStart_lte: ${currentTime}\n                contractTimeEnd_gte: ${currentTime}\n              }\n            ) {\n              id\n              buyerCampaigns {\n                id\n                uri\n              }\n              buyerCampaignsApproved\n            }\n          }\n          id\n        }\n      }\n    `\n    };\n  return fetch(ENDPOINTS[network], {\n    method: 'POST',\n    mode: 'cors',\n    body: JSON.stringify(query)\n  })\n  .then((res) => {\n    console.log(res);\n    return parseGraphResponse(res);\n  })\n  .catch((err) => {\n    console.log(err);\n    return DEFAULT_DATAS;\n  })\n};\n\n/**\n * Parses the response from The Graph to find the latest auction campaign.\n * @param {Object} res The response object from The Graph.\n * @returns An object containing either the latest auction campaign or default data.\n */\nconst parseGraphResponse = async res => {\n  let body = await res.json();\n  let tokenDatas = body.data.tokenDatas;\n  if (tokenDatas.length == 0) return DEFAULT_DATAS;\n\n  let sellerAuction = body.data.tokenDatas[0].sellerNFTSetting.sellerAuctions[0];\n  let latestAuction = null;\n  for (let i=0; i < sellerAuction.buyerCampaignsApproved.length; i++) {\n    if (sellerAuction.buyerCampaignsApproved[i] && sellerAuction.buyerCampaigns.length > 0) {\n      latestAuction = sellerAuction.buyerCampaigns[i];           \n    }\n  }\n\n  if (latestAuction == null) {\n    return DEFAULT_DATAS \n  }\n\n  return latestAuction;\n}\n\n/**\n * Pulls data from IPFS for the banner content.\n * @param {string} uri The IPFS URI containing the banner content.\n * @param {string} format The default banner image format to use if there is no active banner.\n * @param {string} style The default banner image style to use if there is no active banner.\n * @returns An object with the requested banner content, or a default if it cannot be retrieved.\n */\nconst fetchActiveBanner = async (uri, format, style) => {\n  if (!uri) {\n    let bannerObject = { uri: 'DEFAULT_URI', data: DEFAULT_URI_CONTENT };\n    let newFormat = format || defaultFormat;\n    let newStyle = style || defaultStyle;\n    bannerObject.data.image = formats[newFormat].style[newStyle];\n    return bannerObject;\n  }\n\n  return fetch(parseProtocol(uri))\n  .then(async (res) => {\n     let data = await res.json();\n     return res.status == 200 ? { uri: uri, data: data } : null\n  })\n}\n\nfunction sendOnLoadMetric(space) {\n    try {\n        const spaceCounterEndpoint = API_BASE + `/api/v1/space/${space}`\n        fetch(spaceCounterEndpoint, { method: 'PUT' });\n    } catch (e) {\n        console.log(\"Failed to emit onload event\", e.message)\n    }\n}\n\nasync function loadBanner(space, creator, network, format, style, beacon = false) {\n    let uri = null;\n    const activeNFT = await fetchNFT(space, creator, network);\n    if (activeNFT) uri = activeNFT.uri;\n    const activeBanner = await fetchActiveBanner(uri, format, style);\n\n    // Need to add https:// if missing for page to open properly\n    let url = activeBanner.data.url;\n    url = url.match(/^http[s]?:\\/\\//) ? url : 'https://' + url;\n\n    if (url == 'https://www.zesty.market') {\n        url = `https://app.zesty.market/space/${space}`;\n    }\n\n    let image = activeBanner.data.image;\n    image = image.match(/^.+\\.(png|jpe?g)/i) ? image : parseProtocol(image);\n\n    if (beacon) {\n        sendOnLoadMetric(space);\n    }\n\n    feature.set({'url': image, 'link': url});\n}\n\n// Call loadBanner here. Parameters are:\n// Space ID, Creator ID, Network, Format, Style, Enable Beacon (optional)\nloadBanner('89', '0x1ce139b73dbc1d855e4b360856ac3885558fc5f8', 'polygon', 'square', 'standard');", "groupId": null, "link": "https://vrshop.rebuffreality.com/"}], "scripting": false, "voxels": "eJzt1MEJwzAQRNGocxVrX1JFWrAHg6zMe3sT7EXwd8wRzjeYMc/5CWRb8K+OmW2ltesd9qN36KF36KF36LG+9+wFuG/f3tOr4JrQS+96p0df79BL79BD79Cjr3d3gl561zs99u0duGt971foHZ6gd+ihd+iR957NGc7qf4I3OWa29QNpRyJF"}, "island": "Kauai", "kind": "plot"}}