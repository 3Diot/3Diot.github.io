{"success": true, "parcel": {"id": 4885, "height": 10, "token": null, "name": "Ether Cards", "traffic_visits": 3668, "address": "29 Attractive Fork", "visible": true, "geometry": {"type": "Polygon", "crs": {"type": "name", "properties": {"name": "EPSG:3857"}}, "coordinates": [[[-65.58, -0.95], [-65.58, -0.790099995], [-65.41, -0.790099995], [-65.41, -0.95], [-65.58, -0.95]]]}, "area": 271.8300077487745, "streets": [{"name": "Attractive Fork", "geometry": {"type": "LineString", "coordinates": [[-65.39, -1.22], [-65.39, 0]]}, "visible": true, "kind": null, "island": "Vibes", "id": 2044}, {"name": "Appealing Gardens", "geometry": {"type": "LineString", "coordinates": [[-65.6, -1.22], [-65.6, -0.61]]}, "visible": true, "kind": null, "island": "Vibes", "id": 2053}, {"name": "Certain Crescent", "geometry": {"type": "LineString", "coordinates": [[-66, -0.83], [-65.6, -0.83]]}, "visible": true, "kind": null, "island": "Vibes", "id": 2078}, {"name": "Up Quadrant", "geometry": {"type": "LineString", "coordinates": [[-65.39, -0.87], [-65.11, -0.87]]}, "visible": true, "kind": null, "island": "Vibes", "id": 2120}, {"name": "Vibrant Circus", "geometry": {"type": "LineString", "coordinates": [[-65.6, -0.97], [-65.39, -0.97]]}, "visible": true, "kind": null, "island": "Vibes", "id": 2144}], "distance": 6541.4771711004205, "x1": -6558, "x2": -6541, "y1": 0, "y2": 10, "z1": -95, "z2": -79, "suburb": "Vibes", "is_common": false, "owner": "0xa8e162b7d258160f973449c2532234c361586dd4", "owner_name": "NinjaNode", "contributors": ["0xe54f0fcad9b7c61ced45ec30fcd6303511a48ba1", "0x281E6843cC18c8d58eE131309F788879F6C18D10", "0x56Fa492b222ec80652342338BbE7E2E31ed355aB", "0x54dE602b061129632A0d2605e05833b6BedA2172", "0x450eB7c423a9CCB91939F340948E48De9BB55865", "0xa5827c512c312fac59f75e111a1dfa35840ddfcd", "0x0F31D2F80d66FcD1d5dd64418cFc05e7110A413f", "0x81f8e31dd6da93b68c61268d15ce0b878039bfba", "0xA8e162b7d258160f973449c2532234c361586Dd4"], "label": "", "description": null, "sandbox": false, "lightmap_status": "None", "grid": false, "price": null, "content": {"features": [{"type": "cube", "scale": [0.5, 0.5, 0.5], "url": "", "position": [-3, 0.75, -1], "rotation": [0, -3.14, 0], "version": "8.5.13", "uuid": "913da4fe-afac-4e16-9a3e-029a07ed10f3", "script": "//let script_log1 = parcel.getFeatureById('script_log1');\nlet tokenURI = \"https://www.cryptovoxels.com/p/\" + parcel.id;\nlet pLength = 0;\nlet pWidth = 0;\nlet pHeight = 0;\n\nfetch('https://api.thegraph.com/subgraphs/name/protofire/cryptovoxels', {\n\tmethod: 'POST',\n\theaders: {\n\t\t'Content-Type': 'application/json',\n\t},\n  body: JSON.stringify({\n  \tquery: `\n    \tquery MyQuery {\n      parcels(first: 1, where: {tokenURI: \"${tokenURI}\" }) {\n      id\n      tokenID\n      location\n      buildHeight\n      area\n      length\n      width\n      volumeInVoxels\n      owner {\n      \tid\n      }\n      createdAt\n      tokenURI\n       }\n      }\n    `,\n    })\n  })\n\t.then((res) => res.json())\n  .then((result) => {\n//\t\tconsole.log(result.data);\n\t\tpLength = result.data.parcels[0].length;\n\t\tpWidth = result.data.parcels[0].width;\n    pHeight = result.data.parcels[0].buildHeight;\n\t\tconsole.log(pLength);\n\t\tconsole.log(pWidth);\n    console.log(pHeight);\n\n\nlet max_height = 20 - pHeight;\nlet offSet = pHeight - 6;\nlet elementHeight = 1;\nlet elementSpacing = 1;\nlet timeShift = 200;\nlet altD = 0.5;\n\n\nlet max_colors = 400;\nlet colors = [];\nfor (let i=1; i < max_colors + 1; i++) {\n  colors.push(rainbow(max_colors, i));\n}\n\n//9, 1, 0.33, 0.5, 0.5, 8\n//-8.5, 1, 0.33, 0.5, 0.5, 8\n//0.25, 1, 4, 17 0.5 0.5\n\n//13 Kind Fork\n//4, 1, 0.25 20\n//-3.5, 1, 0.25\n//0.25, 1, -9.5\n//0.25, 1, 10\n\nlet westX = (pLength / 2) * (-1) + altD;\nlet westY = 1;\nlet westZ = 0.45;\nlet eastX = pLength / 2;\nlet eastY = 1;\nlet eastZ = 0.45;\nlet weSZ = pWidth - 1;\n\nlet northX = 0.25;\nlet northY = 1;\nlet northZ = pWidth / 2;\nlet southX = 0.25;\nlet southY = 1;\nlet southZ = (pWidth / 2) * (-1) + altD;\nlet nsSZ = pLength;\n\n\n\n\nlet wWalls = [];\nlet nWalls = [];\nlet eWalls = [];\nlet sWalls = [];\nlet localSpacing = elementSpacing;\nlet newFeature = null;\nfor (i=max_height;i>-1;i--) {\n  //if (i < (max_height)) { localSpacing = elementSpacing; } else { localSpacing = 0; }\n  console.log(localSpacing);\n  newFeature = parcel.createFeature('cube');\n  newFeature.set({color: '#000000'});\n  newFeature.set({scale:[altD,elementHeight,weSZ]});\n  newFeature.set({position:[westX,offSet + ((elementHeight + localSpacing) * i),westZ]});\n  newFeature.set({collidable: true});\n  newFeature.set({id: cvFeatureId('wWall', i) });\n  //script_log1.set({text: newFeature.id});\n  wWalls.push(newFeature);\n\n  newFeature = parcel.createFeature('cube');\n  newFeature.set({color: '#000000'});\n  newFeature.set({scale:[nsSZ,elementHeight,altD]});\n  newFeature.set({position:[northX,offSet + ((elementHeight + localSpacing) * i),northZ]});\n  newFeature.set({collidable: true});\n  newFeature.set({id: cvFeatureId('nWall', i) });\n  //script_log1.set({text: newFeature.id});\n  nWalls.push(newFeature);\n\n  newFeature = parcel.createFeature('cube');\n  newFeature.set({color: '#000000'});\n  newFeature.set({scale:[altD,elementHeight,weSZ]});\n  newFeature.set({position:[eastX,offSet + ((elementHeight + localSpacing) * i),eastZ]});\n  newFeature.set({collidable: true});\n  newFeature.set({id: cvFeatureId('eWall', i) });\n  //script_log1.set({text: newFeature.id});\n  eWalls.push(newFeature);\n\n  newFeature = parcel.createFeature('cube');\n  newFeature.set({color: '#000000'});\n  newFeature.set({scale:[nsSZ,elementHeight,altD]});\n  newFeature.set({position:[southX,offSet + ((elementHeight + localSpacing) * i),southZ]});\n  newFeature.set({collidable: true});\n  newFeature.set({id: cvFeatureId('sWall', i) });\n  //script_log1.set({text: newFeature.id});\n  sWalls.push(newFeature);\n  //console.log(i);\n}\n\n\nlet lwWall = null;\nlet lnWall = null;\nlet leWall = null;\nlet lsWall = null;\nlet lColor = null;\nsetInterval(()=>{\n  lwWall = wWalls.pop();\n  lnWall = nWalls.pop();\n  leWall = eWalls.pop();\n  lsWall = sWalls.pop();\n  lColor = colors.pop();\n  lwWall.set({ color: lColor});\n  lnWall.set({ color: lColor});\n  leWall.set({ color: lColor});\n  lsWall.set({ color: lColor});\n//script_log1.set({text: lColor});\n//script_log1.set({text: lwWall.id});\n  wWalls.unshift(lwWall);\n  nWalls.unshift(lnWall);\n  eWalls.unshift(leWall);\n  sWalls.unshift(lsWall);\n  colors.unshift(lColor);\n}, timeShift);\n\n});\n\nfunction cvFeatureId(name, number) {\n  return name + number.toString().padStart(2,'0');\n}\n\nfunction rainbow(numOfSteps, step) {\n    // based on http://stackoverflow.com/a/7419630\n    // This function generates vibrant, \"evenly spaced\" colours (i.e. no clustering). This is ideal for creating easily distiguishable vibrant markers in Google Maps and other apps.\n    // Adam Cole, 2011-Sept-14\n    // HSV to RBG adapted from: http://mjijackson.com/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript\n    var r, g, b;\n    var h = step / numOfSteps;\n    var i = ~~(h * 6);\n    var f = h * 6 - i;\n    var q = 1 - f;\n    switch(i % 6){\n        case 0: r = 1, g = f, b = 0; break;\n        case 1: r = q, g = 1, b = 0; break;\n        case 2: r = 0, g = 1, b = f; break;\n        case 3: r = 0, g = q, b = 1; break;\n        case 4: r = f, g = 0, b = 1; break;\n        case 5: r = 1, g = 0, b = q; break;\n    }\n\n    var c = \"#\" + (\"00\" + (~ ~(r * 235)).toString(16)).slice(-2) + (\"00\" + (~ ~(g * 235)).toString(16)).slice(-2) + (\"00\" + (~ ~(b * 235)).toString(16)).slice(-2);\n    return (c);\n}\n"}], "voxels": "eJzt1EEBACAAhDBtbnRj3IONDtx3px2Ake39/A/Y8T+gyv+AKv8DqvwPqPI/oMr/gCr/A6r8D6jyP6DK/4Aq/wOq/A+o8j+gyv+AKv8DqvwPqPI/oMr/gCr/A6r8D6jyP6DK/4Aq/wOq/A+o8j+gyv+AKv8DqvwPqPI/oMr/gCr/A6r8D6j6OXRIvQ=="}, "island": "Vibes", "kind": "plot"}}