"use strict";(this.webpackChunkname=this.webpackChunkname||[]).push([[304],{304:r=>{r.exports="<!DOCTYPE html>\r\n<head>    \r\n    <meta http-equiv=\"content-type\" content=\"text/html; charset=UTF-8\" />\r\n    <style>html, body {width: 100%;height: 100%;margin: 0;padding: 0;}</style>\r\n    <style>#map {position:absolute;top:0;bottom:0;right:0;left:0;}</style>\r\n    <script src=\"https://cdn.jsdelivr.net/npm/leaflet@1.6.0/dist/leaflet.js\"><\/script>\r\n    <script src=\"https://code.jquery.com/jquery-1.12.4.min.js\"><\/script>\r\n    <script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.2.0/js/bootstrap.min.js\"><\/script> \r\n    <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/leaflet@1.6.0/dist/leaflet.css\"/>\r\n    <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap.min.css\"/>\r\n    <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap-theme.min.css\"/>\r\n    <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/font-awesome/4.6.3/css/font-awesome.min.css\"/> \r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no\" />\r\n    <style> #map{ position: relative; width: 100.0%; height: 100.0%; left: 0.0%; top: 0.0%; } </style>\r\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/d3/5.16.0/d3.min.js\"><\/script>\r\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/chroma-js/2.4.2/chroma.min.js\"><\/script>\r\n</head>\r\n<body> <div id=\"map\" ></div> \r\n    <style>#map-esri { height: 100%; } \r\n        .legend {\r\n        line-height: 18px !important;\r\n        color: #555 !important;\r\n        }\r\n        .legend i {\r\n        width: 18px !important;\r\n        height: 18px !important;\r\n        float: left !important;\r\n        margin-right: 8px !important;\r\n        }\r\n        .info {\r\n        background: white !important;\r\n        background: rgba(255,255,255,0.8) !important;\r\n        box-shadow: 0 0 15px rgba(0,0,0,0.2) !important;\r\n        border-radius: 5px !important;\r\n        margin: 8px !important;\r\n        padding: 8px !important;\r\n        }\r\n        .info h4 {\r\n        margin: 0 0 5px !important;\r\n        color: #777 !important;\r\n        }</style>\r\n</body>\r\n<script async> (async function() {\r\n    const urlbase = 'https://266xag2x98.execute-api.us-east-1.amazonaws.com/default/CoorsBypass?url='\r\n    let parcels = (await d3.json(urlbase+`https://www.cryptovoxels.com/api/parcels/search.json`) )['parcels']\r\n    let traffic = await d3.csv(urlbase+`https://www.k1ic.com/traffic_archive/cv_all_parcel_90day_traffic.csv`);\r\n    var map = L.map( \"map\", { center: [0.0, 0.0], crs: L.CRS.EPSG3857, zoom: 10, zoomControl: true, preferCanvas: false } );\r\n    L.control.scale().addTo(map);\r\n    // delete Object.assign(parcels, {['features']: parcels['parcels'] })['parcels'];\r\n\r\n    var tile_layer = L.tileLayer( \r\n        \"https://map.cryptovoxels.com/tile?z={z}\\u0026x={x}\\u0026y={y}\", {\r\n            \"attribution\": \"Map data \\u0026copy; Cryptovoxels\", \r\n            \"detectRetina\": false, \"maxNativeZoom\": 18, \r\n            \"maxZoom\": 18, \"minZoom\": 0, \"noWrap\": false, \r\n            \"opacity\": 1, \"subdomains\": \"abc\", \"tms\": false\r\n    } ).addTo(map);\r\n    \r\n    let geojson = parcels.map((o, i) => {  \r\n        return { \r\n        'type': 'Polygon', \r\n        'coordinates': o.geometry.coordinates, \r\n        'properties': { ...(({ geometry, ...o }) => o)(o), traffic: (traffic[i] != null ? traffic[i]['90day_traffic_total'] : null) }\r\n    } }); \r\n    // https://gka.github.io/chroma.js/#scale-classes\r\n    // ['darkblue', 'blue', 'lightblue','lavender', 'pink', 'red', 'darkred']\r\n    let getColor = chroma.scale( ['white','blue','black', 'red', 'green'] ).domain([0,10000]) //.classes([0,33,65,100])\r\n    \r\n    styleESRI = function ( feature ) { \r\n        let x = getColor(feature.geometry.properties.traffic).rgb() \r\n        x = \"#\" + ((1 << 24) + (x[0] << 16) + (x[1] << 8) + x[2]).toString(16).slice(1) \r\n        return {\"weight\":0.5, 'color':'black', 'fillColor': x, 'fillOpacity':0.75 }\r\n    }\r\n\r\n    highlightFeatureESRI = function ( e ) {  \r\n        var layer = e.target;\r\n        layer.setStyle({ weight: 5, color: '#666', dashArray: '', fillOpacity: 1 });\r\n        if (!L.Browser.ie && !L.Browser.opera && !L.Browser.edge) { layer.bringToFront() }\r\n        info.update(layer.feature.geometry.properties);\r\n        // layer.bindTooltip( `<div><b> test123 </b></div>`, {\"sticky\": true} )\r\n    }\r\n\r\n    resetHighlightESRI = function ( e ) {\r\n        var layer = e.target \r\n        layer.setStyle( styleESRI( e.target.feature ) )  \r\n    }\r\n\r\n    zoomToFeatureESRI = function ( feature, layer ) { \r\n        // if (screen.width > 800) { // map.fitBounds(e.target.getBounds());\r\n        // var layer = e.target;\r\n        let p = layer.feature.geometry.properties\r\n        var popupContent = `\r\n            <p>\r\n                <b>Address:</b> ${p.address} <br>\r\n                <b>Description:</b> ${p.description} <br>\r\n                <b>Parcel:</b> ${p.id} <br>\r\n                <b>Island:</b> ${p.island} <br>\r\n                <b>Suburb:</b> ${p.suburb} <br>\r\n                <b>Owner:</b> ${p.owner} <br>\r\n                <b>OwnerName:</b> ${p.owner_name} <br>\r\n                <b>Traffic:</b> ${p.traffic}\r\n                <button> <a href='https://www.cryptovoxels.com/parcels/${p.id}' target=\"_blank\" rel=\"noopener noreferrer\"> Visit! </button>\r\n            </p>\r\n        `;\r\n        layer.bindPopup(popupContent); \r\n    }\r\n\r\n    onEachFeatureESRI = function ( feature, layer ) { \r\n        // console.log('onEachFeatureESRI', feature, layer);\r\n        layer.on({\r\n            mouseover: highlightFeatureESRI,\r\n            mouseout: resetHighlightESRI,\r\n            click: zoomToFeatureESRI(feature, layer)\r\n        });\r\n    }\r\n\r\n    L.geoJSON(geojson, { \r\n        style: styleESRI,\r\n        onEachFeature: onEachFeatureESRI\r\n    }).addTo(map);\r\n\r\n    let info = L.control();\r\n    info.onAdd = function(map) {\r\n        this._div = L.DomUtil.create('div', 'info');\r\n        this.update();\r\n        return this._div;\r\n    };\r\n    info.update = function(props) { this._div.innerHTML = props ? '<b>Traffic: </b><br />' + props['traffic'] : '' };\r\n    info.addTo(map);\r\n\r\n    var legend = L.control({position: 'bottomright'});\r\n    legend.onAdd = function (map) {\r\n    var div = L.DomUtil.create('div', 'info legend'),\r\n        grades = [0.0, 2500.0, 5000.0, 7500.0, 10000.0]\r\n        //labels = ['white','blue','black', 'red', 'green'];\r\n        // loop through our density intervals and generate a label with a colored square for each interval\r\n        for (var i = 0; i < grades.length; i++) {\r\n            div.innerHTML +=\r\n                '<i style=\"background:' + getColor(grades[i] + 1) + '\"></i> ' +\r\n                grades[i] + (grades[i + 1] ? '<br>' : '+');\r\n        }\r\n        return div;\r\n    };\r\n    legend.addTo(map);\r\n\r\n    /* \r\n    var color_map_ = {};\r\n    color_map_.color = d3.scale.threshold().domain([0.0, 10000.0]).range(['#ffffffff', '#008000ff']);\r\n    color_map_.x = d3.scale.linear().domain([0.0, 10000.0]).range([0, 400]); \r\n    color_map_.xAxis = d3.svg.axis().scale(color_map_.x).orient(\"top\").tickSize(1).tickValues([0.0, 2500.0, 5000.0, 7500.0, 10000.0]); \r\n    */\r\n})(); \r\n<\/script>"}}]);