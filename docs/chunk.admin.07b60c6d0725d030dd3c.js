"use strict";(self.webpackChunkname=self.webpackChunkname||[]).push([[328],{988:function(n,e,i){i.r(e),i.d(e,{body:function(){return t}});const t='<ion-app>\n<ion-header>\n    \x3c!-- class="ion-no-border" --\x3e\n    <ion-toolbar>\n        <ion-buttons slot="start">\n            <img src=\'/images/icon310.png\' style="width:50px"/>\n        </ion-buttons>\n        <ion-title onclick="location.href=\'https://www.CVMiniGames.com\'" style="cursor: pointer; text-align: center">\n            CVMinigames \n        </ion-title>\n        <ion-buttons class=\'unlocked\' id="btn-logout" slot="end" style="padding-left:10px; cursor: pointer; "> Logout </ion-buttons>\n    </ion-toolbar>\n</ion-header>\n<ion-content fullscreen class="ion-padding">\n    <ion-grid class="md hydrated">\n        \x3c!-- LOG IN --\x3e\n        <ion-row class=\'locked\' style="display: flex; justify-content: center;  align-items: center;">\n            <div style="text-align: center; position:absolute; z-index:9999; background-color: rgba(240, 248, 255, 0.75); padding: 12px;">\n                <h1>CVMinigames | Admin</h1>\n                <p class="ion-padding-start ion-padding-end">\n                    <ion-button id="btn-login" expand="block" fill="outline" class="md button button-block button-outline ion-activatable ion-focusable hydrated">Login With Metamask</ion-button>\n                </p>\n                <p> A non-official admin page for your parcel </p>\n            </div>\n            <iframe id=\'cvIframe\' width="100%" height="500" scrolling="yes" class="iframe-class" frameborder="0"></iframe>\n        </ion-row>\n        <ion-row class=\'locked\' style="display: flex; flex-direction: column; align-content: center;">\n            <h2 style="display: inline">Welcome!</h2>\n            <p>Use this page to administer user-built scripts you can use for your CV Parcel! </p>\n            <p>Here you will be able to:</p>\n            <ul> \n                <li> Configure advanced metadata for your NFT\'s</li>\n                <li> Compose NPC walk-paths, behaviors, and dialogs</li>\n                <li> Connect no to low-code scripts to your parcel</li>\n                <li> +more!</li>\n            </ul>\n        </ion-row>\n        \x3c!-- LOGGED IN --\x3e\n        <ion-row class=\'unlocked\' style="display: flex; justify-content: center; align-items: center; flex-direction: column;">\n            <div style="display: flex; justify-content: center; align-items: center;">\n                <div id=\'parcelsList\' style="background-color: rgba(240, 248, 255, 0.75); padding: 12px;"> </div>\n                <div id=\'contributingParcelsList\' style="background-color: rgba(240, 248, 255, 0.75); padding: 12px;"> </div>\n                <div id=\'parcelInfo\' style="background-color: rgba(240, 248, 255, 0.75); padding: 12px;"> </div>\n            </div>\n            <div id=\'parcelAdminNav\' style="display: none; flex-direction: row; justify-content: space-evenly; width: 100%; padding-top:20px;">\n                <div>\n                    <h2> SVG Paths </h2>\n                    <ion-list>\n                        <ion-item id=\'createSVGbtn\' onclick=createSVG(\'new\') style=\'cursor: pointer;\'>Add Floor</ion-item>\n                        <div id="svglist"></div>\n                    </ion-list>\n                </div>\n                <div>\n                    <h2> NPC Dialog </h2>\n                    <ion-list> \n                        <ion-item id=\'createNPCbtn\' onclick=createNPC() style=\'cursor: pointer;\'>Add NPC</ion-item>\n                        <div id="npclist">\n                          \x3c!-- <ion-item onclick=editNPC()>Character one</ion-item> --\x3e\n                        </div>\n                    </ion-list>\n                </div>\n            </div>\n            <div id=\'parcelAdminConfig\' style="display: none; flex-direction: column; align-items: center; justify-content: space-around; padding-top:20px;">\n                <div id=\'createNPC\' style="display: none; flex-direction: column; align-items: center; justify-content: space-around; padding-top:20px;">\n                  <h2>What\'s this?</h2>\n                    <p> 1. Users will be able create interactive NPCS (walk paths + prop items) </p>\n                    <p> The editor panel will look something like this: </p>\n                    <img id=\'view\'>\t\t\t\t\t\t\t\n                    <p> 2. The users will be able to configure <a href=\'https://charleskarpati.com/cv/scripts/holiday2021/santa1.json\'>local</a> and global states. </p>\n                    <p> 2a. In-game <a href=\'https://charleskarpati.com/cv/scripts/holiday2021/holiday.js\'>logic</a> has already been partially written. </p>\n                    <p> The new config structure will resemble something like this: </p>\n                    <img id=\'struct\'>\n                </div>\n                <div id=\'editNPC\' style="display: none; flex-direction: column; align-items: center; justify-content: space-around; padding-top:20px;">\n                  editNPC content stub\n                </div>\n                <div id=\'createSVG\' style="display: none; flex-direction: column; align-items: center; justify-content: space-around; padding-top:20px;">\n                    <h2>Instructions</h2>\n                    <div>\n                        <p>0. Configure an SVG Template of your parcel filtering features by their height</p>\n                        <p>0A. Only Vox-models with a FeatureID will be shown </p>\n                        <p>1. Download a template SVG of your parcel</p>\n                        <p>2. Draw new boxes and lines on it on an svg editor of your choice </p>\n                        <p>3. Reupload the drawn SVG to save it</p>\n                        <p>4. Connect it to an NPC in the NPC tab to have your drawings define it\'s walk path!</p>\n                        <p>Tip: The SVG will be the name of the SVG file you upload. Only in-parcel Voxels are shown.</p>\n                    </div>\n                    <h2>SVG Editor</h2>\n                    <div style=\'background: #FFF5F6; display: flex; flex-direction: column; align-items: center;\'>\n                        <div><label for="newceiling">SVG Ceiling Height: </label> <input id="newceiling" name="newceiling" type="number" step=".01" value="3"></div>\n                        <div><label for="newfloor">SVG Floor Height: </label> <input id="newfloor" name="newfloor"  type="number" step=".01" value="0"></div>\n                        <p>Display: <small>*Just visual aids - not 100% accurate.*</small> </p> \n                        <div id="newcolidables"></div>  \n                        <p class="ion-padding-start ion-padding-end">\n                            <ion-button onclick=createSVG(\'update\') expand="block" fill="outline" class="md button button-block button-outline ion-activatable ion-focusable hydrated">Update SVG</ion-button>\n                        </p>  \n                    </div>\n                    \x3c!-- PREVIEW NEW SVG --\x3e\n    <div id=\'dl_new_svg\' style="width:100%; height:100%"> </div> \n                    \x3c!-- DOWNLOAD NEW SVG--\x3e\n                    <p class="ion-padding-start ion-padding-end">\n                        <ion-button onclick=downloadSVG(\'dl_new_svg\') expand="block" fill="outline" class="md button button-block button-outline ion-activatable ion-focusable hydrated">Download SVG</ion-button>\n                    </p>\n                    \x3c!-- UPLOAD NEW SVG--\x3e\n                    <div>\n                        <label for="uploadNewSVG">Upload & Save: </label> <input id=\'uploadNewSVG\' type="file" name="uploadNewSVG"  accept=".svg" />\n                    </div>\n                </div>\n                <div id=\'editSVG\' style="display: none; flex-direction: column; align-items: center; justify-content: space-around; padding-top:20px;">\n                    <h2>SVG Editor</h2>\n                    <div id="old_svg_info" style=\'background: #FFF5F6; display: flex; flex-direction: column; align-items: center;\'></div>\n                    \x3c!-- PREVIEW OLD SVG--\x3e\n                    <div id=\'dl_old_svg\' style="width:100%; height:100%"> </div> \n                    \x3c!-- DOWNLOAD OLD SVG--\x3e\n                    <p class="ion-padding-start ion-padding-end">\n                        <ion-button onclick=downloadSVG(\'dl_old_svg\') expand="block" fill="outline" class="md button button-block button-outline ion-activatable ion-focusable hydrated">Download SVG</ion-button>\n                    </p>\n                    \x3c!-- DELETE OLD SVG--\x3e \n                    <p class="ion-padding-start ion-padding-end">\n                        <ion-button onclick=deleteSVG() expand="block" fill="outline" class="md button button-block button-outline ion-activatable ion-focusable hydrated">Delete SVG</ion-button>\n                    </p>\n                    \x3c!-- UPLOAD OLD SVG--\x3e\n                    <div>\n                        <label for="uploadOldSVG">Upload & Save: </label> <input id=\'uploadOldSVG\' type="file" name="uploadOldSVG"  accept=".svg" />\n                    </div> \n                </div>\n            </div>\n            <div id=\'parcelAnalytics\' style="display: none; flex-direction: column; justify-content: center; align-items: flex-start; padding-top:20px;">\n      <div> \n                    <p>It\'s super simple to log user analytics on your parcel. SEO experts hate it!</p>\n                  <h2> Positions </h2>\n                    <p>Simply place this script tag into one of your parcel\'s features to start logging the position of any user who enters your parcel: <br/>\n                      <b> parcel.on(\'playerenter\', (e)=> { (async(e) => eval( ( await (await fetch( \'https://charleskarpati.com/cv/scripts/log_positions.js\' )).text() ) ) )(e) }) </b>\n                    </p> \x3c!-- ?t=\'+Math.floor(Math.random() * 100000 --\x3e \n                    <div id="positions-table"></div> \n                    <br/>\n                    <h2> Clicks </h2>\n                    <p>Logging when a user clicks a specific item can be a bit more tricky.</p> \n                    <p>1. Start by place this script tag into one of your parcel\'s features: <br/>\n                    <b> parcel.on(\'playerenter\', (e)=> { (async(e) => eval( ( await (await fetch( \'https://charleskarpati.com/cv/scripts/log_clicks.js\' )).text() ) ) )(e) }) </b>\n                    </p> \n                    <p>2. Then give the feature you want logged a unique ID prefixed with: <b>log_</b></p>\n                    <div id="clicks-table"></div>\n                </div>\n            </div>\n        </ion-row>\n        <ion-row style="justify-content: center; padding-top:80px;">\n            <div style="text-align: center; background-color: rgba(240, 248, 255, 0.75);">\n                <p>This site is user-ran. </p>\n                <p>No assurance can be made as to the longevity of the services provided. </p>\n                <p>Please do not message the CV team with your questions pertaining to features provided herin. </p>\n            </div>\n        </ion-row>\n    </ion-grid>\n</ion-content>\n</ion-app>'}}]);